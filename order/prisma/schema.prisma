generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id BigInt @id

  orders    Order[]
  addresses CustomerAddress[]

  @@map("customers")
}

model Courier {
  id BigInt @id

  orders Order[]

  @@map("couriers")
}

model Moderator {
  id BigInt @id

  @@map("moderators")
}

model RestaurantManager {
  id           BigInt  @id
  restaurantId BigInt? @unique @map("restaurant_id")

  restaurant Restaurant? @relation(fields: [restaurantId], references: [id])

  @@map("restaurant_managers")
}

model CustomerAddress {
  id BigInt @id @default(autoincrement())

  country    String @map("country")
  region     String @map("region")
  details    String @map("details")
  customerId BigInt @map("customer_id")

  approvalStatus CustomerAddressApprovalStatus @default(PENDING) @map("is_approved")

  customer Customer @relation(fields: [customerId], references: [id])

  @@map("customers_addresses")
}

model WorkingHours {
  id BigInt @id

  dayOfWeek   DayOfWeek @map("day_of_week")
  openingTime DateTime  @map("opening_time") @db.Time()
  closingTime DateTime  @map("closing_time") @db.Time()

  restaurantId BigInt @map("restaurant_id")

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
}

model Restaurant {
  id                BigInt             @id
  restaurantManager RestaurantManager?
  address           String             @map("address")
  isActive          Boolean            @map("is_active")

  orders       Order[]
  menuItem     MenuItem[]
  promocodes   Promocode[]
  workingHours WorkingHours[]
  offers       SurpriseBagOffer[]

  // Geo and locale fields for local discovery in India (backward-compatible additions)
  latitude   Float?   @map("latitude")
  longitude  Float?   @map("longitude")
  city       String?  @map("city")
  state      String?  @map("state")
  pincode    String?  @map("pincode")
  country    String?  @map("country")

  @@map("restaurants")
}

model Promocode {
  id                 BigInt   @id @default(autoincrement())
  nameIdentifier     String   @map("name_identifier") @db.VarChar(25)
  discountPercentage Int      @map("discount_percentage")
  validFrom          DateTime @map("valid_from") @db.Timestamptz()
  validUntil         DateTime @map("valid_until") @db.Timestamptz()
  maxUsageCount      Int      @map("max_usage_count")
  currentUsageCount  Int      @default(0) @map("current_usage_count")
  isActive           Boolean  @default(true) @map("is_active")
  restaurantId       BigInt   @map("restaurant_id")

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("promocodes")
}

model MenuItem {
  id           BigInt @id
  name         String @map("name")
  imageUrl     String @map("image_url")
  price        Float  @map("price")
  restaurantId BigInt @map("restaurant_id")

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("menu_items")
}

/// Surprise bag style offers for pickup (Too Good To Go domain)
model SurpriseBagOffer {
  id          BigInt   @id @default(autoincrement())
  restaurantId BigInt  @map("restaurant_id")

  title        String   @map("title")
  description  String?  @map("description")
  imageUrl     String?  @map("image_url")

  // Pricing: original estimated value and discounted offer price
  originalValue Float   @map("original_value")
  price         Float   @map("price")

  // Inventory
  quantityTotal     Int   @map("quantity_total")
  quantityAvailable Int   @map("quantity_available")

  // Pickup window for the day
  pickupWindowStart DateTime @map("pickup_window_start") @db.Timestamptz()
  pickupWindowEnd   DateTime @map("pickup_window_end") @db.Timestamptz()

  // Operational flags
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  // Dietary/cuisine hints (optional, for filtering)
  isVegetarian Boolean? @map("is_vegetarian")
  cuisine      String?  @map("cuisine")

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  orders     Order[]

  @@map("surprise_bag_offers")
}

model OrderItem {
  id BigInt @id @default(autoincrement())

  menuItemPrice    Float  @map("menu_item_price")
  menuItemName     String @map("menu_item_name")
  menuItemImageUrl String @map("menu_item_image_url")
  orderId          BigInt @map("order_id")
  quantity         Int

  order Order @relation(fields: [orderId], references: [id])

  @@map("order_items")
}

model DeliveryInformation {
  id                   BigInt        @id @default(autoincrement())
  deliveryType         DeliveryType? @map("delivery_type")
  deliveryDistance     Float?        @map("delivery_distance")
  supposedDeliveryTime Int?          @map("supposed_delivery_time")

  originAddress      String  @map("origin_address")
  destinationAddress String? @map("destination_address")

  deliveryAcceptedAt DateTime? @map("delivery_accepted_at") @db.Timestamptz()
  actualDeliveryTime Int?      @map("actual_delivery_time")
  deliveryFinishedAt DateTime? @map("delivery_finished_at") @db.Timestamptz()
  order              Order?

  @@map("deliveries_information")
}

model PriceInformation {
  id                BigInt  @id @default(autoincrement())
  // For surprise bags, this equals offer.price * quantity
  orderItemsPrice   Float   @map("order_items_price")
  promocodeName     String? @map("promocode_name")
  promocodeDiscount Int?    @map("promocode_discount")
  decountedPrice    Float   @map("decounted_price")
  // Not used in pickup flow but left for backward compatibility
  deliveryPrice     Float?  @map("delivery_price")
  totalPrice        Float   @map("total_price")
  order             Order?
}

model PaymentInformation {
  id              BigInt @id @default(autoincrement())
  paymentIntentId String @map("payment_intent_id")
  clientSecretKey String @map("client_secret_key")
  order           Order?
}

model Order {
  id                    BigInt      @id @default(autoincrement())
  customerId            BigInt      @map("customer_id")
  courierId             BigInt?     @map("courier_id")
  restaurantId          BigInt      @map("restaurant_id")
  deliveryInformationId BigInt?     @unique @map("delivery_information_id")
  priceInformationId    BigInt      @unique @map("price_information_id")
  paymentInformationId  BigInt      @unique @map("payment_information_id")
  status                OrderStatus @default(PLACING)
  createdAt             DateTime    @default(now()) @map("created_at") @db.Timestamptz()

  // Surprise Bag specific fields
  offerId      BigInt?   @map("offer_id")
  pickupCode   String?   @map("pickup_code")
  pickupWindowStart DateTime? @map("pickup_window_start") @db.Timestamptz()
  pickupWindowEnd   DateTime? @map("pickup_window_end") @db.Timestamptz()
  collectedAt  DateTime? @map("collected_at") @db.Timestamptz()

  customer            Customer            @relation(fields: [customerId], references: [id])
  courier             Courier?            @relation(fields: [courierId], references: [id])
  restaurant          Restaurant          @relation(fields: [restaurantId], references: [id])
  deliveryInformation DeliveryInformation? @relation(fields: [deliveryInformationId], references: [id])
  priceInformation    PriceInformation    @relation(fields: [priceInformationId], references: [id])
  paymentInformation PaymentInformation  @relation(fields: [paymentInformationId], references: [id])
  items               OrderItem[]
  promotionId         BigInt?
  offer               SurpriseBagOffer?  @relation(fields: [offerId], references: [id])

  @@map("orders")
}

enum OrderStatus {
  PLACING
  PENDING
  PREPARING
  READY
  DELIVERING
  DELIVERED
  CANCELLED

  // Pickup flow statuses
  RESERVED
  COLLECTED
  EXPIRED

  @@map("order_statuses")
}

enum DeliveryType {
  WALKING
  DRIVING

  @@map("delivery_types")
}

enum CustomerAddressApprovalStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("customers_addresses_approval_status")
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY

  @@map("days_of_week")
}
